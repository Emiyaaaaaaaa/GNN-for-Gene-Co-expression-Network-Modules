# 四个步骤
import argparse
import torch
# 创建空参数解析对象 parser
def create_parser():
    parser = argparse.ArgumentParser()
    # parser.add_argument('--name',default='wlt' ,help = '')
    parser.add_argument('--no-cuda', action='store_true', default=False, help='Disables CUDA training.')  # 默认无 cuda
    parser.add_argument('--fastmode', action='store_true', default=False, help='Validate during training pass.')
    parser.add_argument('--sparse', action='store_true', default=False, help='model with sparse version or not.')
    parser.add_argument('--seed', type=int, default=2024, help='Random seed.')
    parser.add_argument('--epochs', type=int, default=500, help='Number of epochs to train.')
    parser.add_argument('--lr', type=float, default=0.0001, help='Initial learning rate.')
    parser.add_argument('--weight_decay', type=float, default=5e-4, help='Weight decay (L2 loss on parameters).')
    parser.add_argument('--hidden', type=int, default=8, help='Number of hidden units.')
    parser.add_argument('--nheads', type=int, default=8, help='Number of head attentions.')
    parser.add_argument('--dropout', type=float, default=0.6, help='Dropout rate (1 - keep probability).')
    parser.add_argument('--alpha', type=float, default=0.2, help='Alpha for the leaky_relu.')
    parser.add_argument('--patience', type=int, default=300, help='Patience')
    # 自动学习率调整机制 patience参数表示等待耐心，当patience个step指标不变即调整学习率

    args = parser.parse_args()

    args.cuda = not args.no_cuda and torch.cuda.is_available()
    return args

if __name__ == '__main__':
    create_parser()
